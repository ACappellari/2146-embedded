#include "contiki.h"
#include "lib/list.h"
#include "lib/memb.h"
#include "lib/random.h"
#include "net/rime.h"

#include <stdio.h>
#include <stdlib.h>

/*---------------------------------------------------------------------------*/

/* We define all variables needed */
#include "dev/sht11.h" //TEMPERATURE AND HUMIDITY
#include "dev/i2cmaster.h" //LIGHT
#include "dev/light-ziglet.h"


#define MAX_RETRANSMISSIONS 16
#define NUM_HISTORY_ENTRIES 4
#define USE_RSSI 0

/*---------------------------------------------------------------------------*/

/* We first declare our two processes. */
PROCESS(broadcast_process, "Broadcast process");
PROCESS(unicast_process, "Unicast process");

/* The AUTOSTART_PROCESSES() definition specifices what processes to
   start when this module is loaded. We put both our processes
   there. */
AUTOSTART_PROCESSES(&broadcast_process, &unicast_process);

/*---------------------------------------------------------------------------*/

/* We define all structures used in both processes */
struct response_packet; 
typedef struct response_packet{
	uint8_t id;
	uint8_t nb_hops;
} response;

struct node_unicast;
typedef struct node_unicast{
	rimeaddr_t addr;
	uint8_t nb_hops;
	int16_t rssi; //Signed because can be negative
} node;

static node parent;
static node me;

struct sensor_data;
typedef struct sensor_data{
	uint16_t value;
	char* type;
} sensor_data;

static sensor_data s_data;

//Event for having parent
static process_event_t event_have_parent;

// Unicast connection for routing
static struct runicast_conn runicast;
// Unicast connection for sensor data
static struct runicast_conn sensor_runicast;
// Broadcast connection for routing
static struct broadcast_conn broadcast;

/*---------------------------------------------------------------------------*/

/* We define all functions used in callbacks */

static void
relay_sensor_data(char * s_payload)
{
	printf("MESSAGE TO RELAY : %s\n", s_payload);
	while(runicast_is_transmitting(&sensor_runicast)){}
	/* Create the sensor packet */
	packetbuf_clear();
	int len = strlen(s_payload);
	char buf[len+16];
	snprintf(buf, sizeof(buf), "%s", s_payload);
	printf("THIS IS PACKET CONTENT %s\n", buf);

	packetbuf_copyfrom(&buf, strlen(buf));
	/* Then sends it */
	runicast_send(&sensor_runicast, &parent.addr, MAX_RETRANSMISSIONS);
	printf("I HAVE SENT SENSORS DATA AGAIN\n");

}

static void
recv_runicast(struct runicast_conn *c, const rimeaddr_t *from, uint8_t seqno)
{
  printf("runicast message received from %d.%d, seqno %d\n",
	 from->u8[0], from->u8[1], seqno);


	//Received a response from my broadcast, should compare number of hops and override
	uint16_t last_rssi = packetbuf_attr(PACKETBUF_ATTR_RSSI);
	//printf("RSSI : %d\n", last_rssi);
	char * payload = (char *) packetbuf_dataptr();
	printf("Payload received : %s\n", payload);
	uint8_t nb_hop = (uint8_t) atoi(payload);

	if(USE_RSSI == 0 && parent.nb_hops >  nb_hop){
		parent.addr.u8[0] = from->u8[0];
		parent.addr.u8[1] = from->u8[1];		
		parent.nb_hops = nb_hop;
		uint8_t tmp = nb_hop + 1;
		me.nb_hops = nb_hop + 1;
		printf("Change parent to %d.%d with %d hop\n", parent.addr.u8[0],parent.addr.u8[1],parent.nb_hops);
		// 
	}else if (USE_RSSI == 1 && last_rssi > parent.rssi){
		parent.addr.u8[0] = from->u8[0];
		parent.addr.u8[1] = from->u8[1];
		parent.rssi = last_rssi;
		printf("Change parent to %d.%d with %d rssi\n", parent.addr.u8[0],parent.addr.u8[1],parent.rssi);
	}
	
}
static void
sent_runicast(struct runicast_conn *c, const rimeaddr_t *to, uint8_t retransmissions)
{
  printf("runicast message sent to %d.%d, retransmissions %d\n",
	 to->u8[0], to->u8[1], retransmissions);

}
static void
timedout_runicast(struct runicast_conn *c, const rimeaddr_t *to, uint8_t retransmissions)
{
  	printf("runicast message timed out when sending to %d.%d, retransmissions %d\n",
	 to->u8[0], to->u8[1], retransmissions);
	
	parent.addr.u8[0] = 0;
	parent.nb_hops = 254;
}

/*---------------------------------------------------------------------------*/

static void
sensor_recv_runicast(struct runicast_conn *c, const rimeaddr_t *from, uint8_t seqno)
{
  printf("runicast message received from %d.%d, seqno %d\n",
	 from->u8[0], from->u8[1], seqno);

	char * s_payload = (char *) packetbuf_dataptr();
	printf("SENSOR PACKET RECEIVED : %s\n", s_payload);
	//char * payload = (char *)  packetbuf_dataptr();
	//printf("Payload received : %s\n", payload);
	// Then sends it to its parent node until it reaches the root
	relay_sensor_data(s_payload);

}

static void
sensor_sent_runicast(struct runicast_conn *c, const rimeaddr_t *to, uint8_t retransmissions)
{
  printf("runicast message sent to %d.%d, retransmissions %d\n",
	 to->u8[0], to->u8[1], retransmissions);

}

static void
sensor_timedout_runicast(struct runicast_conn *c, const rimeaddr_t *to, uint8_t retransmissions)
{
  	printf("runicast message timed out when sending to %d.%d, retransmissions %d\n",
	 to->u8[0], to->u8[1], retransmissions);
	
	parent.addr.u8[0] = 0;
	parent.nb_hops = 254;
}

static const struct runicast_callbacks runicast_callbacks = {recv_runicast,
							     sent_runicast,
							     timedout_runicast};
static const struct runicast_callbacks sensor_runicast_callbacks = {sensor_recv_runicast,
							     	    sensor_sent_runicast,
							     	    sensor_timedout_runicast};

/*---------------------------------------------------------------------------*/

static void
broadcast_recv(struct broadcast_conn *c, const rimeaddr_t *from)
{
	// Check if I have a parent and if yes I open a unicast and send response
	if(parent.addr.u8[0] != 0){
		printf("I have a parent and received broadcast\n");
		while(runicast_is_transmitting(&runicast)){}
		//printf("Entered unicast send preparation\n");	
		packetbuf_clear();
		rimeaddr_t recv;
		char *nb_hop;
		sprintf(nb_hop, "%d", me.nb_hops);
		packetbuf_copyfrom(nb_hop, sizeof(nb_hop));
      		recv.u8[0] = from->u8[0];
      		recv.u8[1] = from->u8[1];
		runicast_send(&runicast, &recv, MAX_RETRANSMISSIONS);
		//printf("Left unicast send\n");
	}
}

static const struct broadcast_callbacks broadcast_call = {broadcast_recv};

/*---------------------------------------------------------------------------*/
static void
send_sensor_data()
{
	/* Set the original receiver of the packet to the root node */
	//rimeaddr_t *root;
	//root->u8[0] = 0;
	//root->u8[1] = 0;
	//packetbuf_set_addr(PACKETBUF_ADDR_ERECEIVER, root);
	/* Wait for the runicast channel to be available*/
	while(runicast_is_transmitting(&sensor_runicast)){}
	/* Create the sensor packet */
	packetbuf_clear();
	int len = strlen(s_data.type);
	char buf[len + 16];
	snprintf(buf, sizeof(buf), "%s %d", s_data.type, s_data.value);
	//printf("THIS IS PACKET CONTENT %s\n", buf);

	packetbuf_copyfrom(&buf, strlen(buf));
	/* Then sends it */
	runicast_send(&sensor_runicast, &parent.addr, MAX_RETRANSMISSIONS);
	printf("I HAVE SENT SENSORS DATA\n");

}

/*---------------------------------------------------------------------------*/
PROCESS_THREAD(broadcast_process, ev, data)
{
  static struct etimer warmup_et;
  static struct etimer et;
  parent.addr.u8[0] = 0;
  parent.addr.u8[1] = 0;
  parent.rssi = (signed) -65534;
  parent.nb_hops = 254;	

  me.addr.u8[0] = rimeaddr_node_addr.u8[0];
  me.addr.u8[1] = rimeaddr_node_addr.u8[1];

  PROCESS_EXITHANDLER(broadcast_close(&broadcast);)
  PROCESS_BEGIN();

  //Define event type for having parent
  event_have_parent = process_alloc_event();

  broadcast_open(&broadcast, 129, &broadcast_call); //Broadcast routing channel

  //etimer_set(&warmup_et, CLOCK_SECOND * 2);
  //PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&warmup_et));
  etimer_set(&et, CLOCK_SECOND * 16 + random_rand() % (CLOCK_SECOND * 16));

  while(1) {
   
    if(parent.addr.u8[0] == 0 && parent.addr.u8[1] == 0) {
	PROCESS_YIELD_UNTIL(etimer_expired(&et));
	//PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));
    	/* Send a broadcast every 16 - 32 seconds */
    	//etimer_set(&et, CLOCK_SECOND * 4 + random_rand() % (CLOCK_SECOND * 4));
	//PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et));

	printf("Broadcast sent : %d.%d\n", parent.addr.u8[0], parent.addr.u8[1]);
	broadcast_send(&broadcast);
	
	etimer_reset(&et);
    }
    else{
	//PROCESS_YIELD_UNTIL(parent.addr.u8[0] == 0 && parent.addr.u8[1] == 0);
	process_post(&unicast_process, event_have_parent , &parent );
	//etimer_reset(&et);
    }
    
    
  }

  PROCESS_END();
}

/*---------------------------------------------------------------------------*/

PROCESS_THREAD(unicast_process, ev, data)
{
  PROCESS_EXITHANDLER(runicast_close(&runicast);)
  PROCESS_EXITHANDLER(runicast_close(&sensor_runicast);)
  PROCESS_BEGIN();

  static struct etimer et_data;
  static unsigned rh;
  sht11_init();
  uint16_t light;
  light_ziglet_init();

  runicast_open(&runicast, 144, &runicast_callbacks); //Unicast routing channel
  runicast_open(&sensor_runicast, 154, &sensor_runicast_callbacks); //Sensor data channel

  //etimer_set(&et_data, CLOCK_SECOND * 8 + random_rand() % (CLOCK_SECOND * 8));

  while(1) {
    //PROCESS_YIELD();
    PROCESS_WAIT_EVENT_UNTIL(ev == event_have_parent);

    node *parent = data;

    printf("This is the data : %d %d\n", parent->addr.u8[0], parent->addr.u8[1]);

    if(parent.addr.u8[0] != 0){
	//PROCESS_YIELD_UNTIL(etimer_expired(&et_data));
	//PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et_data));
    	etimer_set(&et_data, CLOCK_SECOND * 8 + random_rand() % (CLOCK_SECOND * 8));
    
    	//PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et_data));

	// TEMPERETURE
	s_data.type = "./temperature";
	s_data.value = (unsigned) (-39.60 + 0.01 * sht11_temp());
	//printf("TYPE : %s\n", s_data.type);
	//printf("VALUE : %u\n", s_data.value);
	send_sensor_data();

	// HUMIDITY	  
	//rh = sht11_humidity();
	//s_data.type = "./humidity";
	//s_data.value = (unsigned) (-4 + 0.0405*rh - 2.8e-6*(rh*rh));
	//printf("TYPE : %s\n", s_data.type);
	//printf("VALUE : %u\n", s_data.value);

	// LIGHT
	//light = (unsigned) light_ziglet_read();
	//s_data.type = "./light";
	//s_data.value = (unsigned) light;
	//printf("TYPE : %s\n", s_data.type);
	//printf("VALUE : %u\n", s_data.value);
	etimer_reset(&et_data);
    }
    //else{
	//PROCESS_YIELD_UNTIL(parent.addr.u8[0] != 0);
	//process_post(&broadcast_process, PROCESS_EVENT_CONTINUE , &(parent) );
	//etimer_reset(&et_data);
    //}
    
  }

  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
